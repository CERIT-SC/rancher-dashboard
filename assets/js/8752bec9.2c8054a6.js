"use strict";(self.webpackChunkrancher_ui_devkit=self.webpackChunkrancher_ui_devkit||[]).push([[241],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),g=p(n),c=i,m=g["".concat(d,".").concat(c)]||g[c]||s[c]||r;return n?a.createElement(m,l(l({ref:t},u),{},{components:n})):a.createElement(m,l({ref:t},u))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=g;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},5856:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>s,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={},l="Initializing Plugins",o={unversionedId:"plugins/initializing-plugins",id:"plugins/initializing-plugins",title:"Initializing Plugins",description:"Follow instructions here to scaffold your plugin. Once you've done so, there are some initialization steps specific to plugins. Beyond that, plugins largely work the same as the rest of the dashboard. There are a set of top-level folders that can be defined and used as they are in the dashboard: chart, cloud-credential, content, detail, edit, list, machine-config, models, promptRemove, l10n, windowComponents, dialog, and formatters. You can read about what each of these folders does here",source:"@site/docs/plugins/initializing-plugins.md",sourceDirName:"plugins",slug:"/plugins/initializing-plugins",permalink:"/dashboard/plugins/initializing-plugins",draft:!1,tags:[],version:"current",lastUpdatedAt:1671213974,formattedLastUpdatedAt:"Dec 16, 2022",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Getting Started",permalink:"/dashboard/plugins/plugins-getting-started"},next:{title:"Advanced Topics",permalink:"/dashboard/plugins/advanced"}},d={},p=[{value:"Initializing Plugin Stores",id:"initializing-plugin-stores",level:2},{value:"Navigation In and Out of Plugins",id:"navigation-in-and-out-of-plugins",level:2},{value:"Plugin Routing",id:"plugin-routing",level:2},{value:"Defining Products",id:"defining-products",level:2}],u={toc:p};function s(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"initializing-plugins"},"Initializing Plugins"),(0,i.kt)("p",null,"Follow instructions ",(0,i.kt)("a",{parentName:"p",href:"/dashboard/plugins/plugins-getting-started"},"here")," to scaffold your plugin. Once you've done so, there are some initialization steps specific to plugins. Beyond that, plugins largely work the same as the rest of the dashboard. There are a set of top-level folders that can be defined and used as they are in the dashboard: ",(0,i.kt)("inlineCode",{parentName:"p"},"chart"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"cloud-credential"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"content"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"detail"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"edit"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"list"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"machine-config"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"models"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"promptRemove"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"l10n"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"windowComponents"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"dialog"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"formatters"),". You can read about what each of these folders does ",(0,i.kt)("a",{parentName:"p",href:"/dashboard/code-base-works/directory-structure"},"here")),(0,i.kt)("h2",{id:"initializing-plugin-stores"},"Initializing Plugin Stores"),(0,i.kt)("p",null,"Plugins should explicitly register any store modules in their ",(0,i.kt)("inlineCode",{parentName:"p"},"index.ts")," by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"addDashboardStore")," plugin method. This will also add familiar vuex actions for retrieving and classifying resources, details of which can be found in ",(0,i.kt)("inlineCode",{parentName:"p"},"shell/plugins/dashboard-store/index"),".\nPlugins can optionally define their own cluster store module by setting ",(0,i.kt)("inlineCode",{parentName:"p"},"isClusterStore")," in the store index, eg:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"const config: CoreStoreConfig = {\n  namespace:      PRODUCT_NAME,\n  isClusterStore: true\n};\n\nexport default {\n  specifics: harvesterFactory(),\n  config,\n  init:      steveStoreInit\n};\n")),(0,i.kt)("p",null,"This will cause the shell ",(0,i.kt)("inlineCode",{parentName:"p"},"loadCluster")," action to run the plugin's ",(0,i.kt)("inlineCode",{parentName:"p"},"loadCluster")," action when entering a package, and the plugin store's ",(0,i.kt)("inlineCode",{parentName:"p"},"unsubscribe")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"reset")," when leaving. "),(0,i.kt)("h2",{id:"navigation-in-and-out-of-plugins"},"Navigation In and Out of Plugins"),(0,i.kt)("p",null,"Plugins can define ",(0,i.kt)("inlineCode",{parentName:"p"},"onEnter")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"onLeave")," hooks in their index, which will run when the authenticated middleware detects a package change by checking the route meta property. ",(0,i.kt)("inlineCode",{parentName:"p"},"onEnter")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"onLeave")," accept the same props: the vuex store context and a config opject containing: "),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Key"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"clusterId")),(0,i.kt)("td",{parentName:"tr",align:null},"String"),(0,i.kt)("td",{parentName:"tr",align:null},"The unique ID of the current cluster, determined by the route's ",(0,i.kt)("inlineCode",{parentName:"td"},"cluster")," param")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"product")),(0,i.kt)("td",{parentName:"tr",align:null},"String"),(0,i.kt)("td",{parentName:"tr",align:null},"The name of the product being navigated to, also taken from the route")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"oldProduct")),(0,i.kt)("td",{parentName:"tr",align:null},"String"),(0,i.kt)("td",{parentName:"tr",align:null},"The name of the product being navigated away from")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"oldIsExt")),(0,i.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"True if the previous product was in a package (note that this doesn't distinguish between inter- and intra-package product changes)")))),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"authenticated")," middleware will:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Connect to the management cluster (",(0,i.kt)("inlineCode",{parentName:"li"},"loadManagement"),")"),(0,i.kt)("li",{parentName:"ul"},"Apply product config, as determined from the route (",(0,i.kt)("inlineCode",{parentName:"li"},"applyProducts"),")"),(0,i.kt)("li",{parentName:"ul"},"If an old plugin is loaded, run its ",(0,i.kt)("inlineCode",{parentName:"li"},"onLeave")," hook"),(0,i.kt)("li",{parentName:"ul"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"onEnter")," hook for new plugin "),(0,i.kt)("li",{parentName:"ul"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"loadCluster")," (which, as stated above, can run load and unload cluster actions defined in plugins)")),(0,i.kt)("h2",{id:"plugin-routing"},"Plugin Routing"),(0,i.kt)("p",null,"Plugins should use a pages directory, as the shell currently does, but routing needs to be explicitly defined then added in the plugin index using the plugin ",(0,i.kt)("inlineCode",{parentName:"p"},"addRoutes")," method. Plugin routes can override existing dashboard routes: they'll be loaded on plugin entry and unloaded (with old dashboard routes re-loaded...) on plugin leave. As touched on above, cluster and product information used to connect to the cluster and define navigation is determined from the route. Consequently, while plugins have a lot of control over their own routing, anything tied into one kubernetes cluster should be nested in ",(0,i.kt)("inlineCode",{parentName:"p"},"pages/c/_cluster"),"."),(0,i.kt)("h2",{id:"defining-products"},"Defining Products"),(0,i.kt)("p",null,"Product configuration for plugins is largely unchanged (read more about products ",(0,i.kt)("a",{parentName:"p",href:"/dashboard/code-base-works/products-and-navigation"},"here"),"); however, if the plugin contains one product intended to have a standalone UI, some additional product configuration is required, via the ",(0,i.kt)("inlineCode",{parentName:"p"},"setIsSingleProduct")," vuex action."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Key"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"logoRoute")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://v3.router.vuejs.org/api/#routes"},"Vue Router route config")),(0,i.kt)("td",{parentName:"tr",align:null},"Where to navigate when the upper-left logo is clicked")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"productNameKey")),(0,i.kt)("td",{parentName:"tr",align:null},"String"),(0,i.kt)("td",{parentName:"tr",align:null},"translation key for product name")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"afterLoginRoute")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://v3.router.vuejs.org/api/#routes"},"Vue Router route config")),(0,i.kt)("td",{parentName:"tr",align:null},"where to redirect in auth middleware")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"enableSessionCheck")),(0,i.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"Toggle verifying the user auth session on ",(0,i.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilitychange_event"},"visibility change events"),". Defaults to ",(0,i.kt)("inlineCode",{parentName:"td"},"false"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"getVersionInfo")),(0,i.kt)("td",{parentName:"tr",align:null},"Function"),(0,i.kt)("td",{parentName:"tr",align:null},"Version Info shown in lower left")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"logo")),(0,i.kt)("td",{parentName:"tr",align:null},"SVG"),(0,i.kt)("td",{parentName:"tr",align:null},"what's on the box: set the logo shown in the top level menu")))))}s.isMDXComponent=!0}}]);