"use strict";(self.webpackChunkrancher_ui_devkit=self.webpackChunkrancher_ui_devkit||[]).push([[2761],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),p=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return i.createElement(l.Provider,{value:n},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(t),d=r,g=c["".concat(l,".").concat(d)]||c[d]||h[d]||a;return t?i.createElement(g,o(o({ref:n},u),{},{components:t})):i.createElement(g,o({ref:n},u))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<a;p++)o[p]=t[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1678:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var i=t(7462),r=(t(7294),t(3905));const a={},o="Publishing an Extension",s={unversionedId:"extensions/publishing",id:"extensions/publishing",title:"Publishing an Extension",description:"Manually Publishing an Extension",source:"@site/docs/extensions/publishing.md",sourceDirName:"extensions",slug:"/extensions/publishing",permalink:"/dashboard/extensions/publishing",draft:!1,tags:[],version:"current",lastUpdatedAt:1689248352,formattedLastUpdatedAt:"Jul 13, 2023",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Using yarn link",permalink:"/dashboard/extensions/advanced/yarn-link"},next:{title:"Usecases/Examples",permalink:"/dashboard/extensions/usecases/overview"}},l={},p=[{value:"Manually Publishing an Extension",id:"manually-publishing-an-extension",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Running the Publish Script",id:"running-the-publish-script",level:2},{value:"Additional Information",id:"additional-information",level:2}],u={toc:p},c="wrapper";function h(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"publishing-an-extension"},"Publishing an Extension"),(0,r.kt)("h2",{id:"manually-publishing-an-extension"},"Manually Publishing an Extension"),(0,r.kt)("p",null,"Publishing a release into a registry of your choice can be accomplished with the ",(0,r.kt)("inlineCode",{parentName:"p"},"publish-pkgs")," script declared in your extension's ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),". This script will build a Docker image for each extension package, as well as a Helm chart that can be used to deploy the images. Given the option, the script can automatically push the built images and chart into a specified registry."),(0,r.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"You will need ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"Docker")," installed on the machine you wish to publish from, and a registry that will house your images."),(0,r.kt)("h2",{id:"running-the-publish-script"},"Running the Publish Script"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Usage"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"Usage: ./node_modules/@rancher/shell/scripts/extension/publish [<options>] [plugins]\n options:\n  -p           Push container images on build\n  -f           Force building the chart even if it already exists\n  -r <name>    Specify destination container registry for built images\n  -o <name>    Specify destination container registry organization for built images\n  -i <prefix>  Specify prefix for the built container image (default: 'ui-extension-')\n  -c           Build as a container image rather than publishing to Github\n  -s <repo>    Specify destination GitHub repository (org/name) - defaults to the git origin\n  -b <branch>  Specify destination GitHub branch\n")),(0,r.kt)("p",null,"You can simply run the ",(0,r.kt)("inlineCode",{parentName:"p"},"publish-pkgs")," script with the option ",(0,r.kt)("inlineCode",{parentName:"p"},"-c")," to have images built without specifying the registry or image names. The image names will be generated by the repository organization and the package name (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"my-org/test-pkg:0.1.0"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"yarn publish-pkgs -c\n")),(0,r.kt)("p",null,"To publish to a specific registry you will need to pass the Registry and Organization arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"yarn publish-pkgs -r <REGISTRY> -o <ORGANIZATION> -c\n")),(0,r.kt)("p",null,"Running any of the commands above will only build your images - in order to publish the images to your registry you will need to either push them manually or you can run the script with the ",(0,r.kt)("inlineCode",{parentName:"p"},"-p")," option. This will automatically push your images to the specified registry."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"yarn publish-pkgs -r <REGISTRY> -o <ORGANIZATION> -p -c\n")),(0,r.kt)("h2",{id:"additional-information"},"Additional Information"),(0,r.kt)("p",null,"You can find more info in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rancher/ui-plugin-server#ui-plugin-server"},"this repository")," on how the image build is accomplished."))}h.isMDXComponent=!0}}]);