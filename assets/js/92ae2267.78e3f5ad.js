"use strict";(self.webpackChunkrancher_ui_devkit=self.webpackChunkrancher_ui_devkit||[]).push([[3650],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return n?o.createElement(f,a(a({ref:t},u),{},{components:n})):o.createElement(f,a({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7111:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const i={},a="Custom VueX Stores",s={unversionedId:"extensions/advanced/stores",id:"extensions/advanced/stores",title:"Custom VueX Stores",description:"Extensions may want to define their own custom VueX stores.",source:"@site/docs/extensions/advanced/stores.md",sourceDirName:"extensions/advanced",slug:"/extensions/advanced/stores",permalink:"/dashboard/extensions/advanced/stores",draft:!1,tags:[],version:"current",lastUpdatedAt:1691738446,formattedLastUpdatedAt:"Aug 11, 2023",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Hooks",permalink:"/dashboard/extensions/advanced/hooks"},next:{title:"Version compatibility",permalink:"/dashboard/extensions/advanced/version-compatibility"}},l={},c=[{value:"Initializing Extension Stores",id:"initializing-extension-stores",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"custom-vuex-stores"},"Custom VueX Stores"),(0,r.kt)("p",null,"Extensions may want to define their own custom VueX stores."),(0,r.kt)("h2",{id:"initializing-extension-stores"},"Initializing Extension Stores"),(0,r.kt)("p",null,"Extensions should explicitly register any store modules in their ",(0,r.kt)("inlineCode",{parentName:"p"},"index.ts")," by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"addDashboardStore")," extension method. This will also add familiar ",(0,r.kt)("a",{parentName:"p",href:"https://vuex.vuejs.org/"},"Vuex")," actions for retrieving and classifying resources, details of which can be found in ",(0,r.kt)("inlineCode",{parentName:"p"},"shell/plugins/dashboard-store/index"),"."),(0,r.kt)("p",null,"An example would be to define in the folder ",(0,r.kt)("inlineCode",{parentName:"p"},"store")," of your extension a basic configuration on an ",(0,r.kt)("inlineCode",{parentName:"p"},"index.ts")," file, such as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { CoreStoreSpecifics, CoreStoreConfig } from '@shell/core/types';\nimport getters from './getters'; // this would be your getters file on your extension /store folder\nimport mutations from './mutations'; // this would be your mutations file on your extension /store folder\nimport actions from './actions'; // this would be your actions file on your extension /store folder\n\n// to achieve naming consistency throughout the extension\n// we recommend this to be defined on a config file and exported\n// so that the developer can import it wherever it needs to be used\nconst YOUR_PRODUCT_NAME = 'the-name-of-your-product';\n\nconst yourExtensionFactory = (): CoreStoreSpecifics => {\n  return {\n    state() {\n      return { someStateVariable: '' };\n    },\n\n    getters: { ...getters },\n\n    mutations: { ...mutations },\n\n    actions: { ...actions },\n  };\n};\nconst config: CoreStoreConfig = { namespace: YOUR_PRODUCT_NAME };\n\nexport default {\n  specifics: yourExtensionFactory(),\n  config\n};\n")),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"store")," folder you just need to create the ",(0,r.kt)("inlineCode",{parentName:"p"},"getters.js"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"actions.js")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"mutations.js")," files and write up your store code there, based on the convention of ",(0,r.kt)("a",{parentName:"p",href:"https://vuex.vuejs.org/"},"Vuex"),"."),(0,r.kt)("p",null,"And on the ",(0,r.kt)("inlineCode",{parentName:"p"},"index.ts")," on your root folder, where you define your extension configuration, you can just use the ",(0,r.kt)("inlineCode",{parentName:"p"},"addDashboardStore")," extension method, such as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { importTypes } from '@rancher/auto-import';\nimport { IPlugin } from '@shell/core/types';\nimport extensionStore from './store';\n\n// Init the package\nexport default function(plugin: IPlugin) {\n  // Auto-import model, detail, edit from the folders\n  importTypes(plugin);\n\n  // Provide extension metadata from package.json\n  // it will grab information such as `name` and `description`\n  plugin.metadata = require('./package.json');\n\n  // Load a product\n  plugin.addProduct(require('./product'));\n  \n  // => => => Add Vuex store\n  plugin.addDashboardStore(extensionStore.config.namespace, extensionStore.specifics, extensionStore.config);\n}\n")),(0,r.kt)("p",null,"Extensions can optionally define their own cluster store module by setting ",(0,r.kt)("inlineCode",{parentName:"p"},"isClusterStore")," in the store index, eg:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// to achieve naming consistency throughout the extension\n// we recommend this to be defined on a config file and exported\n// so that the developer can import it wherever it needs to be used\nconst YOUR_PRODUCT_NAME = 'the-name-of-your-product';\n\nconst config: CoreStoreConfig = {\n  namespace:      YOUR_PRODUCT_NAME,\n  isClusterStore: true\n};\n\nexport default {\n  specifics: harvesterFactory(),\n  config,\n  init:      steveStoreInit\n};\n")),(0,r.kt)("p",null,"This will cause the shell ",(0,r.kt)("inlineCode",{parentName:"p"},"loadCluster")," action to run the extension's ",(0,r.kt)("inlineCode",{parentName:"p"},"loadCluster")," action when entering a package, and the extension store's ",(0,r.kt)("inlineCode",{parentName:"p"},"unsubscribe")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"reset")," when leaving."))}p.isMDXComponent=!0}}]);